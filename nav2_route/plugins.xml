<class_libraries>
  <library path="edge_scorers">
    <class type="nav2_route::DistanceScorer" base_class_type="nav2_route::EdgeCostFunction">
      <description>Cost function for penalizing edge distance proportionally to potential speed limits</description>
    </class>
  </library>
  <library path="edge_scorers">
    <class type="nav2_route::AdjustEdgesScorer" base_class_type="nav2_route::EdgeCostFunction">
      <description>Cost function for rejecting edge that are closed due to non-traversability or setting remote dynamic costs (as opposed to static costs in the metadata from the Penalty Scorer)</description>
    </class>
  </library>
  <library path="edge_scorers">
    <class type="nav2_route::PenaltyScorer" base_class_type="nav2_route::EdgeCostFunction">
      <description>Cost function for adding a cost based on metadata stored in the navigation graph</description>
    </class>
  </library>
  <library path="edge_scorers">
    <class type="nav2_route::CostmapScorer" base_class_type="nav2_route::EdgeCostFunction">
      <description>Cost function for adding a cost based on the costmap values in the edge</description>
    </class>
  </library>

  <library path="route_operations">
    <class type="nav2_route::AdjustSpeedLimit" base_class_type="nav2_route::RouteOperation">
      <description>Route tracking operation to adjust speed limit based on graph metadata</description>
    </class>
  </library>
  <library path="route_operations">
    <class type="nav2_route::ReroutingService" base_class_type="nav2_route::RouteOperation">
      <description>Exposes a route operation to replan upon external service request</description>
    </class>
  </library>
  <library path="route_operations">
    <class type="nav2_route::TriggerEvent" base_class_type="nav2_route::RouteOperation">
      <description>Route operation templated by service types to call arbitrary services on node or edge events</description>
    </class>
  </library>

  <library path="graph_parsers">
    <class type="nav2_route::GeoJsonGraphParser" base_class_type="nav2_route::GraphParser">
      <description>Parse the geojson graph file into the graph data type</description>
    </class>
  </library>
</class_libraries>
